import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import { ArrowLeft, Wand2, Eye, Download, Copy, RefreshCw, Save, FileText, Palette, Sparkles, Edit, Share } from "lucide-react";
import { Link } from "wouter";

export default function ContentForgeCreator() {
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState("");
  const [previewMode, setPreviewMode] = useState("edit");
  
  // Form State
  const [contentType, setContentType] = useState("blog-post");
  const [topic, setTopic] = useState("");
  const [keywords, setKeywords] = useState("");
  const [targetAudience, setTargetAudience] = useState("");
  const [tone, setTone] = useState("professional");
  const [wordCount, setWordCount] = useState(800);
  const [includeImages, setIncludeImages] = useState(false);
  const [seoOptimized, setSeoOptimized] = useState(true);

  const handleGenerateContent = async () => {
    if (!topic.trim()) {
      toast({
        title: "Topic Required",
        description: "Please enter a topic for content generation.",
        variant: "destructive",
      });
      return;
    }

    setIsGenerating(true);
    
    // Simulate content generation
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const sampleContent = `# ${topic}

## Introduction

In today's rapidly evolving digital landscape, understanding ${topic.toLowerCase()} has become crucial for businesses and individuals alike. This comprehensive guide will explore the key aspects and provide actionable insights.

## Key Benefits

- **Enhanced Efficiency**: Streamline your processes and improve productivity
- **Cost Savings**: Reduce operational costs while maintaining quality
- **Scalability**: Build solutions that grow with your needs
- **Competitive Advantage**: Stay ahead in your industry

## Implementation Strategy

### Phase 1: Planning and Assessment
Begin by evaluating your current situation and identifying areas for improvement. This foundational step ensures successful implementation.

### Phase 2: Execution
Deploy your strategy with careful monitoring and adjustment as needed. Focus on measurable outcomes and continuous improvement.

### Phase 3: Optimization
Fine-tune your approach based on real-world results and feedback from stakeholders.

## Best Practices

1. **Start Small**: Begin with pilot projects to test your approach
2. **Monitor Progress**: Use analytics to track performance
3. **Gather Feedback**: Regularly collect input from users and stakeholders
4. **Iterate Quickly**: Make adjustments based on data and feedback

## Conclusion

Implementing ${topic.toLowerCase()} strategies requires careful planning and execution. By following the guidelines outlined in this article, you'll be well-positioned for success.

---

*This content was generated by Content Forge AI and optimized for SEO and engagement.*`;

    setGeneratedContent(sampleContent);
    setIsGenerating(false);
    setPreviewMode("preview");
    
    toast({
      title: "Content Generated",
      description: "High-quality content has been created based on your specifications.",
    });
  };

  const handleCopyContent = () => {
    navigator.clipboard.writeText(generatedContent);
    toast({
      title: "Content Copied",
      description: "Content has been copied to your clipboard.",
    });
  };

  const handleSaveContent = () => {
    toast({
      title: "Content Saved",
      description: "Content has been saved to your content library.",
    });
  };

  const handleRegenerateContent = () => {
    handleGenerateContent();
  };

  return (
    <div className="min-h-screen neural-bg relative bg-dark-primary">
      {/* Header */}
      <header className="bg-dark-secondary/80 backdrop-blur-lg border-b border-dark-accent/20 px-4 lg:px-6 py-4">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div className="flex items-center gap-3">
            <Link href="/agents/content-forge">
              <Button variant="ghost" size="sm" className="p-2 text-gray-400 hover:text-white">
                <ArrowLeft className="w-5 h-5" />
              </Button>
            </Link>
            <div className="p-3 rounded-lg bg-orange-500/20">
              <Wand2 className="w-6 h-6 text-orange-400" />
            </div>
            <div>
              <h1 className="text-xl lg:text-2xl font-bold gradient-text">CONTENT CREATOR</h1>
              <p className="text-sm text-gray-400">AI-Powered Content Generation Studio</p>
            </div>
          </div>
          
          <div className="flex items-center gap-3">
            <Badge className="bg-orange-500/20 text-orange-400">
              AI Ready
            </Badge>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="p-4 lg:p-6 max-w-7xl mx-auto">
        <div className="grid gap-6 lg:grid-cols-3">
          {/* Content Generation Form */}
          <div className="lg:col-span-1 space-y-6">
            <Card className="holographic-card">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-orange-400">
                  <Wand2 className="w-5 h-5" />
                  Content Generator
                </CardTitle>
                <CardDescription>Configure your content generation parameters</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="content-type">Content Type</Label>
                  <Select value={contentType} onValueChange={setContentType}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select content type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="blog-post">Blog Post</SelectItem>
                      <SelectItem value="article">Article</SelectItem>
                      <SelectItem value="social-media">Social Media Post</SelectItem>
                      <SelectItem value="product-description">Product Description</SelectItem>
                      <SelectItem value="email">Email Newsletter</SelectItem>
                      <SelectItem value="landing-page">Landing Page Copy</SelectItem>
                      <SelectItem value="press-release">Press Release</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="topic">Topic *</Label>
                  <Input
                    id="topic"
                    placeholder="Enter your content topic..."
                    value={topic}
                    onChange={(e) => setTopic(e.target.value)}
                    className="bg-dark-surface border-dark-accent/30"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="keywords">Keywords (comma separated)</Label>
                  <Input
                    id="keywords"
                    placeholder="SEO, content marketing, AI..."
                    value={keywords}
                    onChange={(e) => setKeywords(e.target.value)}
                    className="bg-dark-surface border-dark-accent/30"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="target-audience">Target Audience</Label>
                  <Input
                    id="target-audience"
                    placeholder="Marketing professionals, small business owners..."
                    value={targetAudience}
                    onChange={(e) => setTargetAudience(e.target.value)}
                    className="bg-dark-surface border-dark-accent/30"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="tone">Tone & Style</Label>
                  <Select value={tone} onValueChange={setTone}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select tone" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="professional">Professional</SelectItem>
                      <SelectItem value="casual">Casual</SelectItem>
                      <SelectItem value="friendly">Friendly</SelectItem>
                      <SelectItem value="authoritative">Authoritative</SelectItem>
                      <SelectItem value="conversational">Conversational</SelectItem>
                      <SelectItem value="technical">Technical</SelectItem>
                      <SelectItem value="creative">Creative</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label>Word Count: {wordCount}</Label>
                  <input
                    type="range"
                    min="100"
                    max="3000"
                    step="100"
                    value={wordCount}
                    onChange={(e) => setWordCount(parseInt(e.target.value))}
                    className="w-full h-2 bg-dark-surface rounded-lg appearance-none cursor-pointer slider-orange"
                  />
                  <div className="flex justify-between text-xs text-gray-400">
                    <span>100</span>
                    <span>1500</span>
                    <span>3000</span>
                  </div>
                </div>

                <Button
                  onClick={handleGenerateContent}
                  disabled={isGenerating || !topic.trim()}
                  className="w-full bg-orange-500/20 text-orange-400 hover:bg-orange-500/30 border-orange-500/30"
                >
                  {isGenerating ? (
                    <>
                      <div className="w-4 h-4 border-2 border-orange-400/30 border-t-orange-400 rounded-full animate-spin mr-2" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <Wand2 className="w-4 h-4 mr-2" />
                      Generate Content
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>

            {/* Quick Templates */}
            <Card className="holographic-card">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-orange-400">
                  <FileText className="w-5 h-5" />
                  Quick Templates
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                {[
                  { name: "How-to Guide", icon: "📝" },
                  { name: "Product Review", icon: "⭐" },
                  { name: "Case Study", icon: "📊" },
                  { name: "Comparison Article", icon: "⚖️" },
                  { name: "Listicle", icon: "📋" },
                ].map((template) => (
                  <Button
                    key={template.name}
                    variant="outline"
                    className="w-full justify-start border-dark-accent/30 text-gray-400 hover:text-white"
                    onClick={() => {
                      setContentType("blog-post");
                      setTopic(template.name);
                    }}
                  >
                    <span className="mr-2">{template.icon}</span>
                    {template.name}
                  </Button>
                ))}
              </CardContent>
            </Card>
          </div>

          {/* Content Preview & Editor */}
          <div className="lg:col-span-2 space-y-6">
            <Card className="holographic-card">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2 text-orange-400">
                    <Eye className="w-5 h-5" />
                    Content Preview
                  </CardTitle>
                  
                  <div className="flex items-center gap-2">
                    <Tabs value={previewMode} onValueChange={setPreviewMode} className="w-auto">
                      <TabsList className="bg-dark-secondary/50">
                        <TabsTrigger value="edit" className="data-[state=active]:bg-orange-500/20 data-[state=active]:text-orange-400">
                          <Edit className="w-4 h-4 mr-1" />
                          Edit
                        </TabsTrigger>
                        <TabsTrigger value="preview" className="data-[state=active]:bg-orange-500/20 data-[state=active]:text-orange-400">
                          <Eye className="w-4 h-4 mr-1" />
                          Preview
                        </TabsTrigger>
                      </TabsList>
                    </Tabs>
                  </div>
                </div>
                
                {generatedContent && (
                  <div className="flex flex-wrap gap-2">
                    <Button
                      onClick={handleCopyContent}
                      size="sm"
                      variant="outline"
                      className="border-dark-accent/30"
                    >
                      <Copy className="w-4 h-4 mr-1" />
                      Copy
                    </Button>
                    
                    <Button
                      onClick={handleSaveContent}
                      size="sm"
                      className="bg-green-500/20 text-green-400 hover:bg-green-500/30 border-green-500/30"
                    >
                      <Save className="w-4 h-4 mr-1" />
                      Save
                    </Button>
                    
                    <Button
                      onClick={handleRegenerateContent}
                      size="sm"
                      variant="outline"
                      className="border-dark-accent/30"
                    >
                      <RefreshCw className="w-4 h-4 mr-1" />
                      Regenerate
                    </Button>
                    
                    <Dialog>
                      <DialogTrigger asChild>
                        <Button
                          size="sm"
                          variant="outline"
                          className="border-dark-accent/30"
                        >
                          <Share className="w-4 h-4 mr-1" />
                          Export
                        </Button>
                      </DialogTrigger>
                      <DialogContent className="bg-dark-secondary border-dark-accent/30">
                        <DialogHeader>
                          <DialogTitle className="text-orange-400">Export Content</DialogTitle>
                          <DialogDescription>Choose your preferred export format</DialogDescription>
                        </DialogHeader>
                        <div className="space-y-3">
                          <Button className="w-full" variant="outline">
                            <Download className="w-4 h-4 mr-2" />
                            Download as Markdown
                          </Button>
                          <Button className="w-full" variant="outline">
                            <Download className="w-4 h-4 mr-2" />
                            Download as HTML
                          </Button>
                          <Button className="w-full" variant="outline">
                            <Download className="w-4 h-4 mr-2" />
                            Download as PDF
                          </Button>
                        </div>
                      </DialogContent>
                    </Dialog>
                  </div>
                )}
              </CardHeader>
              <CardContent>
                <Tabs value={previewMode} className="w-full">
                  <TabsContent value="edit" className="mt-0">
                    <Textarea
                      placeholder={
                        !generatedContent
                          ? "Generated content will appear here. Configure your parameters and click 'Generate Content' to begin."
                          : ""
                      }
                      value={generatedContent}
                      onChange={(e) => setGeneratedContent(e.target.value)}
                      className="min-h-[600px] bg-dark-surface border-dark-accent/30 font-mono text-sm"
                    />
                  </TabsContent>
                  
                  <TabsContent value="preview" className="mt-0">
                    <div className="min-h-[600px] p-4 rounded-lg bg-white text-black overflow-auto">
                      {generatedContent ? (
                        <div className="prose prose-sm max-w-none">
                          {generatedContent.split('\n').map((line, index) => {
                            if (line.startsWith('# ')) {
                              return <h1 key={index} className="text-2xl font-bold mb-4">{line.substring(2)}</h1>;
                            } else if (line.startsWith('## ')) {
                              return <h2 key={index} className="text-xl font-semibold mb-3 mt-6">{line.substring(3)}</h2>;
                            } else if (line.startsWith('### ')) {
                              return <h3 key={index} className="text-lg font-semibold mb-2 mt-4">{line.substring(4)}</h3>;
                            } else if (line.startsWith('- **')) {
                              const match = line.match(/- \*\*(.*?)\*\*: (.*)/);
                              if (match) {
                                return (
                                  <li key={index} className="mb-2">
                                    <strong>{match[1]}</strong>: {match[2]}
                                  </li>
                                );
                              }
                            } else if (line.startsWith('- ')) {
                              return <li key={index} className="mb-1">{line.substring(2)}</li>;
                            } else if (line.match(/^\d+\./)) {
                              return <li key={index} className="mb-1">{line.substring(line.indexOf('.') + 2)}</li>;
                            } else if (line.trim() === '') {
                              return <br key={index} />;
                            } else if (line.startsWith('*') && line.endsWith('*')) {
                              return <p key={index} className="italic text-gray-600 text-sm mt-4">{line.slice(1, -1)}</p>;
                            }
                            return <p key={index} className="mb-3">{line}</p>;
                          })}
                        </div>
                      ) : (
                        <div className="flex items-center justify-center h-full text-gray-400">
                          <div className="text-center">
                            <Palette className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                            <p>No content to preview yet.</p>
                            <p className="text-sm">Generate content to see the preview.</p>
                          </div>
                        </div>
                      )}
                    </div>
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}